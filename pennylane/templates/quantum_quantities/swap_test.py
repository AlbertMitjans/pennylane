# Copyright 2018-2021 Xanadu Quantum Technologies Inc.# Licensed under the Apache License, Version 2.0 (the "License");# you may not use this file except in compliance with the License.# You may obtain a copy of the License at#     http://www.apache.org/licenses/LICENSE-2.0# Unless required by applicable law or agreed to in writing, software# distributed under the License is distributed on an "AS IS" BASIS,# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.# See the License for the specific language governing permissions and# limitations under the License.r"""Contains the SwapTest template."""import pennylane as qmlfrom pennylane.operation import Operation, AnyWiresfrom pennylane.ops import Hadamard, CSWAPfrom pennylane.measure import sampleclass SwapTest(Operation):    """A class that implements the SWAPTest"""    num_wires = AnyWires    grad_recipe = None    def __init__(self, q_reg1, q_reg2, ancilla, do_queue=True, id=None):        wires = ancilla + q_reg1 + q_reg2        if len(q_reg1) != len(q_reg2):            raise ValueError(f"The two quantum registers must be the same size to compare them via SWAPTest, "                             f"got: {q_reg1}, {q_reg2}")        if len(ancilla) != 1:            raise ValueError(f"Expected a single ancilla qubit, got: {ancilla}")        super().__init__(q_reg1, q_reg2, wires=wires, do_queue=do_queue, id=id)    @property    def num_params(self):        return 0    def expand(self):        with qml.tape.QuantumTape() as tape:            total_wires = len(self.wires)            len_register = (total_wires - 1) // 2            Hadamard(wires=self.wires[0])  # apply hadamard to ancilla qubit            for i in range(len_register):                swap_index = i + len_register                CSWAP(self.wires[0:1] + self.wires[i:i+1] + self.wires[swap_index:swap_index+1])  # swap qubit registers            Hadamard(wires=self.wires[0])  # apply hadamard again        return tape